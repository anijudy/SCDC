message("JGL takes ", (t2-t1)[3], " seconds.")
K <- length(listk)
p <- ncol(gnet$theta[[1]])
theta1 <- gnet$theta[[K-1]]
theta2 <- gnet$theta[[K]]
wij <- matrix(nrow = p, ncol = p)
for (i in 1:p){
for (j in 1:p){
if (i <= j){
s1 <- (theta1[i,i]*theta1[j,j] + theta1[j,j]^2)/gnet$n[1]
s2 <- (theta2[i,i]*theta2[j,j] + theta2[j,j]^2)/gnet$n[2]
wij[i,j] <- (theta1[i,j] - theta2[i,j])/sqrt(s1+s2)
}
}
}
M <- max(wij^2, na.rm = T)
reject <- (M >= qgumbel(alpha) + 4*log(p) - log(log(p)))
pval <- pgumbel(M)
return(c(pval, reject))
}
# begin modeling
listk <- simu.list
t1 <- proc.time()
# add parameter selection procedure by BIC...
gnet <- JGL_k(Y=listk, penalty = "fused", lambda1 = 0.1, lambda2 = 0.1)
t2 <- proc.time()
install.packages('devtools')
devtools::install_github('xzhoulab/SPARK')
seger <- readRDS("S0102_SEGER.rds")
setwd("H:/994/SCDC/data")
seger <- readRDS("S0102_SEGER.rds")
generateBulk_norep <- function(eset, ct.varname, sample, disease = NULL, ct.sub,
prop_mat = NULL, nbulk=10, samplewithRep = F){
x.sub <- eset[,eset@phenoData@data[,ct.varname] %in% ct.sub]
# qc: remove non-zero genes
x.sub <- x.sub[rowSums(exprs(x.sub)) > 0,]
# calculate sample mean & sample variance matrix: genes by cell types
ct.id <- droplevels(as.factor(x.sub@phenoData@data[,ct.varname]))
sample.id <- x.sub@phenoData@data[,sample]
pdatab <- x.sub@phenoData@data
if (! is.null(disease)){
disease <- x.sub@phenoData@data[,disease]
names(disease) <- sample.id
}
# number of cell type of interest
k <- length(unique(ct.id))
message(paste('Using',k,'cell types to generate pseudo bulk samples...'))
# select donors for each pseudo bulk sample
# nbulk=10
pseudo_donors <- sample(sample.id, nbulk, replace = T)
names(pseudo_donors) <- paste("bulk",1:nbulk, sep = "_")
# generate random matrix for true proportions
if (!is.null(prop_mat)){
true.p1 <- prop_mat # manually input proportion matrix...
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- names(pseudo_donors)
message("Using input proportion matrix to create pseudo bulk samples...")
# make sure if without replacement, number of cells matches the input prop mat...
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
} else {
true.p1 <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- paste(pseudo_donors,1:nbulk,sep = "_")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
message("Generating random cell type proportions...")
}
# create pseudo bulk sample.id according to total available number of cells:
pseudo_bulk <- NULL
for(xx in 1:length(pseudo_donors)){ #length(pseudo_donors)
# xx = 5
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.ct[xx,] <- temp.nct[colnames(true.ct)] # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
temp.b1 <- sapply(ct.sub, function(ucluster){
# ucluster <- ct.sub[4]
temp.vec <- temp[,temp.cluster %in% ucluster] # for a specific cell type
if (is.null(dim(temp.vec))){
temp.sum <- rep(0, length(temp.vec))
} else if (! is.null(dim(temp.vec))) {
if (dim(temp.vec)[2] == 0){
temp.sum <- rep(0, dim(temp.vec)[1])
} else {
temp.sample <- sample(1:ncol(temp.vec), temp.nct[ucluster], replace = samplewithRep) # which cells in this cell type will be selected
temp.mat <- temp.vec[,temp.sample] # select all those cells
if (is.null(dim(temp.mat))){
temp.sum <- temp.mat
} else {
temp.sum <- rowSums(temp.mat, na.rm = T) # expression sum for one cell type in this bulk, need to sum up all types.
}
}
}
})
out = rowSums(temp.b1)
pseudo_bulk <- cbind(pseudo_bulk, out)
colnames(pseudo_bulk)[xx] <- paste(pseudo_donors[xx],xx,sep = "_")
}
# create pseudo eset for bulk sample.id
if (! is.null(disease)){
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors, disease = disease[pseudo_donors])
} else {
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors)
}
rownames(pseudo_pdata) <- colnames(pseudo_bulk)
pseudo_fdata <- data.frame(labelDescription = rownames(pseudo_bulk),
row.names = rownames(pseudo_bulk))
message("generating expression set object for pseudo bulk sample.id...")
pseudo_eset <- ExpressionSet(pseudo_bulk,
AnnotatedDataFrame(pseudo_pdata),
AnnotatedDataFrame(pseudo_fdata))
pseudo_eset0 <- pseudo_eset[,rowSums(!is.na(true.p1))>0] #non-zero eset
true.p0 <- true.p1[rowSums(!is.na(true.p1))>0,]
true.ct0 <- true.ct[rowSums(!is.na(true.p1))>0,]
return(list(true_p = true.p1, pseudo_bulk = pseudo_bulk, pseudo_eset = pseudo_eset,
num.real = true.ct, true_p0 = true.p0, true.ct0 = true.ct0, pseudo_eset0 = pseudo_eset0)) # , entropy = entropy
}
pmat <- matrix(c(0.1,0.1,0.1, 0.7, 0.2,0.5,0.05, 0.25), nrow = 2)
pmat
pmat <- matrix(c(0.1,0.1,0.1, 0.7, 0.2,0.5,0.05, 0.25), nrow = 2, byrow = T)
pmat
colnames(pmat) <- c("alpha","beta","delta","gamma")
rownames(pmat) <- c("s1","s2")
test <- generateBulk_norep(eset = seger, ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"),
prop_mat = pmat)
eset = seger
Female = c(0.05, 0.05, 0.05)
Male = c(0.05, 0.05, 0.05)
Ring = c(0.20, 0.30, 0.40)
Schizont = c(0.05, 0.05, 0.1)
Trophozoite = c(0.65, 0.55, 0.4)
prop_mat <- cbind(Female, Male, Ring, Schizont, Trophozoite)
prop_mat <- as.data.frame(prop_mat)
prop_mat <- as.matrix(prop_mat)
View(prop_mat)
eset = seger
ct.varname = "cluster"
sample = "sample"
ct.sub = c("alpha","beta","delta","gamma")
prop_mat = pmat
nbulk = 2
disease = NULL
samplewithRep = F
x.sub <- eset[,eset@phenoData@data[,ct.varname] %in% ct.sub]
# qc: remove non-zero genes
x.sub <- x.sub[rowSums(exprs(x.sub)) > 0,]
# calculate sample mean & sample variance matrix: genes by cell types
ct.id <- droplevels(as.factor(x.sub@phenoData@data[,ct.varname]))
sample.id <- x.sub@phenoData@data[,sample]
pdatab <- x.sub@phenoData@data
if (! is.null(disease)){
disease <- x.sub@phenoData@data[,disease]
names(disease) <- sample.id
}
# number of cell type of interest
k <- length(unique(ct.id))
message(paste('Using',k,'cell types to generate pseudo bulk samples...'))
# select donors for each pseudo bulk sample
# nbulk=10
pseudo_donors <- sample(sample.id, nbulk, replace = T)
names(pseudo_donors) <- paste("bulk",1:nbulk, sep = "_")
pseudo_donors
# generate random matrix for true proportions
if (!is.null(prop_mat)){
true.p1 <- prop_mat # manually input proportion matrix...
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- names(pseudo_donors)
message("Using input proportion matrix to create pseudo bulk samples...")
# make sure if without replacement, number of cells matches the input prop mat...
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
} else {
true.p1 <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- paste(pseudo_donors,1:nbulk,sep = "_")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
message("Generating random cell type proportions...")
}
true.p1
# create pseudo bulk sample.id according to total available number of cells:
pseudo_bulk <- NULL
for(xx in 1:length(pseudo_donors)){ #length(pseudo_donors)
# xx = 5
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.ct[xx,] <- temp.nct[colnames(true.ct)] # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
temp.b1 <- sapply(ct.sub, function(ucluster){
# ucluster <- ct.sub[4]
temp.vec <- temp[,temp.cluster %in% ucluster] # for a specific cell type
if (is.null(dim(temp.vec))){
temp.sum <- rep(0, length(temp.vec))
} else if (! is.null(dim(temp.vec))) {
if (dim(temp.vec)[2] == 0){
temp.sum <- rep(0, dim(temp.vec)[1])
} else {
temp.sample <- sample(1:ncol(temp.vec), temp.nct[ucluster], replace = samplewithRep) # which cells in this cell type will be selected
temp.mat <- temp.vec[,temp.sample] # select all those cells
if (is.null(dim(temp.mat))){
temp.sum <- temp.mat
} else {
temp.sum <- rowSums(temp.mat, na.rm = T) # expression sum for one cell type in this bulk, need to sum up all types.
}
}
}
})
out = rowSums(temp.b1)
pseudo_bulk <- cbind(pseudo_bulk, out)
colnames(pseudo_bulk)[xx] <- paste(pseudo_donors[xx],xx,sep = "_")
}
xx = 1
# xx = 1
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.ct[xx,] <- temp.nct[colnames(true.ct)] # true number of cells in the pseudo bulk.
true.p1
prop_mat
true.p1 <- prop_mat # manually input proportion matrix...
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- names(pseudo_donors)
message("Using input proportion matrix to create pseudo bulk samples...")
# xx = 1
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
temp.ncellk
temp.cluster
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
temp.nct
true.p1
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.p1
temp.nct
temp.ncellk
true.p1 <- prop_mat # manually input proportion matrix...
true.p1
temp.ncellk
temp.ncellk*true.p1[xx,names(temp.ncellk)]
true.ct[xx,] <- round(temp.ncellk*true.p1[xx,names(temp.ncellk)] ) # true number of cells in the pseudo bulk.
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk) # true number of cells per cell type for each sample
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
true.ct
true.ct[xx,] <- round(temp.ncellk*true.p1[xx,names(temp.ncellk)] ) # true number of cells in the pseudo bulk.
true.ct
min(temp.ncellk*true.p1[xx,names(temp.ncellk)])
generateBulk_norep <- function(eset, ct.varname, sample, disease = NULL, ct.sub,
prop_mat = NULL, nbulk=10, samplewithRep = F){
x.sub <- eset[,eset@phenoData@data[,ct.varname] %in% ct.sub]
# qc: remove non-zero genes
x.sub <- x.sub[rowSums(exprs(x.sub)) > 0,]
# calculate sample mean & sample variance matrix: genes by cell types
ct.id <- droplevels(as.factor(x.sub@phenoData@data[,ct.varname]))
sample.id <- x.sub@phenoData@data[,sample]
pdatab <- x.sub@phenoData@data
if (! is.null(disease)){
disease <- x.sub@phenoData@data[,disease]
names(disease) <- sample.id
}
# number of cell type of interest
k <- length(unique(ct.id))
message(paste('Using',k,'cell types to generate pseudo bulk samples...'))
# select donors for each pseudo bulk sample
# nbulk=10
pseudo_donors <- sample(sample.id, nbulk, replace = T)
names(pseudo_donors) <- paste("bulk",1:nbulk, sep = "_")
# generate random matrix for true proportions
if (!is.null(prop_mat)){
true.p1 <- prop_mat # manually input proportion matrix...
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- names(pseudo_donors)
message("Using input proportion matrix to create pseudo bulk samples...")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk) # true number of cells per cell type for each sample
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
# make sure if without replacement, number of cells matches the input prop mat...
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
} else {
true.p1 <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- paste(pseudo_donors,1:nbulk,sep = "_")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk) # true number of cells per cell type for each sample
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
message("Generating random cell type proportions...")
}
# create pseudo bulk sample.id according to total available number of cells:
pseudo_bulk <- NULL
for(xx in 1:length(pseudo_donors)){ #length(pseudo_donors)
# xx = 1
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
if (is.null(prop_mat)){ #if using random proportions
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.ct[xx,] <- temp.nct[colnames(true.ct)] # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
} else { #if using the user-defined proportions
if (min(temp.ncellk*true.p1[xx,names(temp.ncellk)]) >0 & temp.ncellk*true.p1[xx,names(temp.ncellk)]<1){
message("Please check if your input prop_mat is reasonable. The number of cells of certain selected cell type might be too small.")
}
true.ct[xx,] <- round(temp.ncellk*true.p1[xx,names(temp.ncellk)] ) # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
}
temp.b1 <- sapply(ct.sub, function(ucluster){
# ucluster <- ct.sub[4]
temp.vec <- temp[,temp.cluster %in% ucluster] # for a specific cell type
if (is.null(dim(temp.vec))){
temp.sum <- rep(0, length(temp.vec))
} else if (! is.null(dim(temp.vec))) {
if (dim(temp.vec)[2] == 0){
temp.sum <- rep(0, dim(temp.vec)[1])
} else {
temp.sample <- sample(1:ncol(temp.vec), temp.nct[ucluster], replace = samplewithRep) # which cells in this cell type will be selected
temp.mat <- temp.vec[,temp.sample] # select all those cells
if (is.null(dim(temp.mat))){
temp.sum <- temp.mat
} else {
temp.sum <- rowSums(temp.mat, na.rm = T) # expression sum for one cell type in this bulk, need to sum up all types.
}
}
}
})
out = rowSums(temp.b1)
pseudo_bulk <- cbind(pseudo_bulk, out)
colnames(pseudo_bulk)[xx] <- paste(pseudo_donors[xx],xx,sep = "_")
}
# create pseudo eset for bulk sample.id
if (! is.null(disease)){
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors, disease = disease[pseudo_donors])
} else {
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors)
}
rownames(pseudo_pdata) <- colnames(pseudo_bulk)
pseudo_fdata <- data.frame(labelDescription = rownames(pseudo_bulk),
row.names = rownames(pseudo_bulk))
message("generating expression set object for pseudo bulk sample.id...")
pseudo_eset <- ExpressionSet(pseudo_bulk,
AnnotatedDataFrame(pseudo_pdata),
AnnotatedDataFrame(pseudo_fdata))
pseudo_eset0 <- pseudo_eset[,rowSums(!is.na(true.p1))>0] #non-zero eset
true.p0 <- true.p1[rowSums(!is.na(true.p1))>0,]
true.ct0 <- true.ct[rowSums(!is.na(true.p1))>0,]
return(list(true_p = true.p1, pseudo_bulk = pseudo_bulk, pseudo_eset = pseudo_eset,
num.real = true.ct, true_p0 = true.p0, true.ct0 = true.ct0, pseudo_eset0 = pseudo_eset0)) # , entropy = entropy
}
pmat <- matrix(c(0.1,0.1,0.1, 0.7, 0.2,0.5,0.05, 0.25), nrow = 2, byrow = T)
test <- generateBulk_norep(eset = seger, ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"),
prop_mat = pmat, nbulk = 2)
min(temp.ncellk*true.p1[xx,names(temp.ncellk)]) >0 & temp.ncellk*true.p1[xx,names(temp.ncellk)]<1
min(temp.ncellk*true.p1[xx,names(temp.ncellk)])
min(temp.ncellk*true.p1[xx,names(temp.ncellk)]) >0
generateBulk_norep <- function(eset, ct.varname, sample, disease = NULL, ct.sub,
prop_mat = NULL, nbulk=10, samplewithRep = F){
x.sub <- eset[,eset@phenoData@data[,ct.varname] %in% ct.sub]
# qc: remove non-zero genes
x.sub <- x.sub[rowSums(exprs(x.sub)) > 0,]
# calculate sample mean & sample variance matrix: genes by cell types
ct.id <- droplevels(as.factor(x.sub@phenoData@data[,ct.varname]))
sample.id <- x.sub@phenoData@data[,sample]
pdatab <- x.sub@phenoData@data
if (! is.null(disease)){
disease <- x.sub@phenoData@data[,disease]
names(disease) <- sample.id
}
# number of cell type of interest
k <- length(unique(ct.id))
message(paste('Using',k,'cell types to generate pseudo bulk samples...'))
# select donors for each pseudo bulk sample
# nbulk=10
pseudo_donors <- sample(sample.id, nbulk, replace = T)
names(pseudo_donors) <- paste("bulk",1:nbulk, sep = "_")
# generate random matrix for true proportions
if (!is.null(prop_mat)){
true.p1 <- prop_mat # manually input proportion matrix...
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- names(pseudo_donors)
message("Using input proportion matrix to create pseudo bulk samples...")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk) # true number of cells per cell type for each sample
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
# make sure if without replacement, number of cells matches the input prop mat...
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
} else {
true.p1 <- matrix(data = 0,ncol = k, nrow = nbulk)
colnames(true.p1) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.p1) <- paste(pseudo_donors,1:nbulk,sep = "_")
true.ct <- matrix(data = 0,ncol = k, nrow = nbulk) # true number of cells per cell type for each sample
colnames(true.ct) <- unique(ct.id)[order(unique(ct.id))]
rownames(true.ct) <- paste(pseudo_donors,1:nbulk,sep = "_")
message("Generating random cell type proportions...")
}
# create pseudo bulk sample.id according to total available number of cells:
pseudo_bulk <- NULL
for(xx in 1:length(pseudo_donors)){ #length(pseudo_donors)
# xx = 1
message('generating bulk ', xx, ' from donor ', pseudo_donors[xx], '...')
idxd <- sample.id == pseudo_donors[xx] # for a selected donor
temp <- exprs(x.sub)[,idxd] # his expression matrix
temp.cluster <- ct.id[idxd] # cluster info for cells
# match names!!!!!!!!!!!!!!!!!
temp.ncellk <- table(factor(temp.cluster))
if (is.null(prop_mat)){ #if using random proportions
temp.nct <- ceiling(runif(length(temp.ncellk), min = 0.6, max = 1)*temp.ncellk) # take random number of available single cells
true.p1[xx,names(temp.nct)] <- temp.nct/sum(temp.nct) # true proportions
true.ct[xx,] <- temp.nct[colnames(true.ct)] # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
} else { #if using the user-defined proportions
if (min(temp.ncellk*true.p1[xx,names(temp.ncellk)]) >0 & min(temp.ncellk*true.p1[xx,names(temp.ncellk)])<1){
message("Please check if your input prop_mat is reasonable. The number of cells of certain selected cell type might be too small.")
}
true.ct[xx,] <- round(temp.ncellk*true.p1[xx,names(temp.ncellk)] ) # true number of cells in the pseudo bulk.
true.p1[is.na(true.p1)] <- 0
true.ct[is.na(true.ct)] <- 0
}
temp.b1 <- sapply(ct.sub, function(ucluster){
# ucluster <- ct.sub[4]
temp.vec <- temp[,temp.cluster %in% ucluster] # for a specific cell type
if (is.null(dim(temp.vec))){
temp.sum <- rep(0, length(temp.vec))
} else if (! is.null(dim(temp.vec))) {
if (dim(temp.vec)[2] == 0){
temp.sum <- rep(0, dim(temp.vec)[1])
} else {
temp.sample <- sample(1:ncol(temp.vec), temp.nct[ucluster], replace = samplewithRep) # which cells in this cell type will be selected
temp.mat <- temp.vec[,temp.sample] # select all those cells
if (is.null(dim(temp.mat))){
temp.sum <- temp.mat
} else {
temp.sum <- rowSums(temp.mat, na.rm = T) # expression sum for one cell type in this bulk, need to sum up all types.
}
}
}
})
out = rowSums(temp.b1)
pseudo_bulk <- cbind(pseudo_bulk, out)
colnames(pseudo_bulk)[xx] <- paste(pseudo_donors[xx],xx,sep = "_")
}
# create pseudo eset for bulk sample.id
if (! is.null(disease)){
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors, disease = disease[pseudo_donors])
} else {
pseudo_pdata <- data.frame(sample.id = colnames(pseudo_bulk), donors = pseudo_donors)
}
rownames(pseudo_pdata) <- colnames(pseudo_bulk)
pseudo_fdata <- data.frame(labelDescription = rownames(pseudo_bulk),
row.names = rownames(pseudo_bulk))
message("generating expression set object for pseudo bulk sample.id...")
pseudo_eset <- ExpressionSet(pseudo_bulk,
AnnotatedDataFrame(pseudo_pdata),
AnnotatedDataFrame(pseudo_fdata))
pseudo_eset0 <- pseudo_eset[,rowSums(!is.na(true.p1))>0] #non-zero eset
true.p0 <- true.p1[rowSums(!is.na(true.p1))>0,]
true.ct0 <- true.ct[rowSums(!is.na(true.p1))>0,]
return(list(true_p = true.p1, pseudo_bulk = pseudo_bulk, pseudo_eset = pseudo_eset,
num.real = true.ct, true_p0 = true.p0, true.ct0 = true.ct0, pseudo_eset0 = pseudo_eset0)) # , entropy = entropy
}
test <- generateBulk_norep(eset = seger, ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"),
prop_mat = pmat, nbulk = 2)
install.packages("devtools")
install.packages("roxygen2")
# usethis::create_package("H:/994/SCDC/package/SCDC")
# PUT ALL FUNCTIONS INTO THE R FOLDER
# setwd("..")
# getwd()
setwd("H:/994/SCDC/package/SCDC2/SCDC") # THE OLD PATH HAS ERROR TO UPDATE TO GITHUB
#longleaf: ------  setwd("/pine/scr/m/e/meichen/SCDC/SCDC")
devtools::document()
setwd("..")
devtools::install("SCDC")
library(SCDC)
generateBulk_norep
SCDC::generateBulk_norep
setwd("H:/994/SCDC/package/SCDC2/SCDC") # THE OLD PATH HAS ERROR TO UPDATE TO GITHUB
#longleaf: ------  setwd("/pine/scr/m/e/meichen/SCDC/SCDC")
devtools::document()
setwd("..")
devtools::install("SCDC")
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
