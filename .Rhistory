qc.tmouse<- readRDS("H:/994/SCDC/data/S0103_QCTMOUSE.rds")
bulk10x <- readRDS("H:/994/SCDC/data/S0102_peroubulk10x_fvb34.rds")
bulkff <- readRDS("H:/994/SCDC/data/S0102_peroubulkff_fvb34.rds")
qc.perou<- readRDS("H:/994/SCDC/data/S0103_QCPEROU.rds")
qc.tmouse<- readRDS("H:/994/SCDC/data/S0103_QCTMOUSE.rds")
perou <- qc.perou$sc.eset.qc
tmouse <- qc.tmouse$sc.eset.qc
perou$metacluster2[perou$md_cluster %in% c( "immune")] <- "immune"
perou$metacluster2[perou$md_cluster %in% c("basal","luminal","fibroblast","endothelial")] <- "BaLuFibEndo"
subcl.10x.perou <- SCDC_prop_subcl_marker(bulk.eset = bulk10x, sc.eset = perou, ct.varname = ct.varname, fl.varname = "metacluster2",
sample = sample, ct.sub = c("endothelial","fibroblast","immune","luminal","basal"),
ct.fl.sub = unique(perou$metacluster2), select.marker = T, LFC.lim = 5)
subcl.10x.perou <- SCDC_prop_subcl_marker(bulk.eset = bulk10x, sc.eset = perou, ct.varname = "md_cluster", fl.varname = "metacluster2",
sample = sample, ct.sub = c("endothelial","fibroblast","immune","luminal","basal"),
ct.fl.sub = unique(perou$metacluster2), select.marker = T, LFC.lim = 5)
unique(perou$metacluster2)
bulk.eset = bulk10x
sc.eset = perou
ct.varname = "md_cluster"
fl.varname = "metacluster2"
subcl.10x.perou <- SCDC_prop_subcl_marker(bulk.eset = bulk10x, sc.eset = perou, ct.varname = "md_cluster", fl.varname = "metacluster2",
sample = "subj", ct.sub = c("endothelial","fibroblast","immune","luminal","basal"),
ct.fl.sub = unique(perou$metacluster2), select.marker = T, LFC.lim = 5)
tmouse$metacluster2[tmouse$md_cluster %in% c("immune")] <- "immune"
tmouse$metacluster2[tmouse$md_cluster %in% c("endothelial", "fibroblast","luminal","basal")] <- "BaLuFibEndo"
subcl.10x.tmouse <- SCDC_prop_subcl_marker(bulk.eset = bulk10x, sc.eset = tmouse, ct.varname = "md_cluster", fl.varname = "metacluster2",
sample = "subj", ct.sub = c("endothelial","fibroblast","immune","luminal","basal"),
ct.fl.sub = unique(tmouse$metacluster2), select.marker = T, LFC.lim = 5)
ens_subcl_perou10x <- SCDC_ENSEMBLE_subcl(bulk.eset = bulk10x, prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou),
ct.sub = c("endothelial","fibroblast","immune","luminal","basal"), search.length = 0.01)
prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou)
ct.sub = c("endothelial","fibroblast","immune","luminal","basal")
search.length = 0.01
row.list <- sapply(1:length(prop.list), function(x){
rownames(prop.list[[x]]$yhat)
})
gene.use0 <- Reduce("intersect", row.list)
gene.use <- intersect(gene.use0, rownames(bulk.eset))
yobs <- exprs(bulk.eset)[gene.use,]
w_pearson <- NA; w_mad <- NA; w_rmsd <- NA; w_spearman <- NA
if ("Grid search" %in% search.method){
message("Searching ENSEMBLE weight by Grid search:")
# GRID SEARCH MATRIX:
gridmat <- getSearchGrid(lengthby = search.length, nparam = length(prop.list))
testp <- NA
ptm <- proc.time()
if (!is.null(truep)){
message("Searching according to proportion--Pearson Correlation...")
testp <- sapply(1:dim(gridmat)[1], function(gg){
temp <- matrix(0, ncol = length(ct.sub), nrow = dim(prop.list[[1]]$prop.est)[1])
colnames(temp) <- ct.sub
wtemp <- NULL
for (z in 1:length(prop.list)){
wtemp <- gridmat[gg,z]*prop.list[[z]]$prop.est
mcol <- match(colnames(wtemp), colnames(temp))
temp[,mcol] <- wtemp + temp[,mcol]
}
rownames(temp) <- rownames(truep)
w_eval <- SCDC_peval(ptrue = as.matrix(truep), pest = temp,
pest.names = c("SCDC"),
select.ct = ct.sub)
w_eval$evals.table[3]
})
w_pearson <- gridmat[which.max(testp),]
}
message("Searching according to bulk expression measurement...")
testy <- sapply(1:dim(gridmat)[1], function(gg){
temp <- 0
for (z in 1:length(prop.list)){
# z=1
# gg=1
ytemp <- gridmat[gg,z]*prop.list[[z]]$yhat[gene.use,]
temp <- ytemp + temp
}
head(temp)
head(yobs)
w_eval <- SCDC_yeval(y = yobs, yest = temp, yest.names = "SCDC")
w_eval$yevals.table
})
ptm2 <- proc.time() - ptm
message("Grid search used", ptm2[3]," seconds.")
# summarize results:
w_spearman <- gridmat[which.max(t(testy)[,1]),]
w_rmsd <- gridmat[which.min(t(testy)[,2]),]
w_mad <- gridmat[which.min(t(testy)[,3]),]
}
search.method = c("Grid search", "LAD", "NNLS")
iter.max = 2000
nu = 1e-04
epsilon = 0.001
if ("Grid search" %in% search.method){
message("Searching ENSEMBLE weight by Grid search:")
# GRID SEARCH MATRIX:
gridmat <- getSearchGrid(lengthby = search.length, nparam = length(prop.list))
testp <- NA
ptm <- proc.time()
if (!is.null(truep)){
message("Searching according to proportion--Pearson Correlation...")
testp <- sapply(1:dim(gridmat)[1], function(gg){
temp <- matrix(0, ncol = length(ct.sub), nrow = dim(prop.list[[1]]$prop.est)[1])
colnames(temp) <- ct.sub
wtemp <- NULL
for (z in 1:length(prop.list)){
wtemp <- gridmat[gg,z]*prop.list[[z]]$prop.est
mcol <- match(colnames(wtemp), colnames(temp))
temp[,mcol] <- wtemp + temp[,mcol]
}
rownames(temp) <- rownames(truep)
w_eval <- SCDC_peval(ptrue = as.matrix(truep), pest = temp,
pest.names = c("SCDC"),
select.ct = ct.sub)
w_eval$evals.table[3]
})
w_pearson <- gridmat[which.max(testp),]
}
message("Searching according to bulk expression measurement...")
testy <- sapply(1:dim(gridmat)[1], function(gg){
temp <- 0
for (z in 1:length(prop.list)){
# z=1
# gg=1
ytemp <- gridmat[gg,z]*prop.list[[z]]$yhat[gene.use,]
temp <- ytemp + temp
}
head(temp)
head(yobs)
w_eval <- SCDC_yeval(y = yobs, yest = temp, yest.names = "SCDC")
w_eval$yevals.table
})
ptm2 <- proc.time() - ptm
message("Grid search used", ptm2[3]," seconds.")
# summarize results:
w_spearman <- gridmat[which.max(t(testy)[,1]),]
w_rmsd <- gridmat[which.min(t(testy)[,2]),]
w_mad <- gridmat[which.min(t(testy)[,3]),]
}
truep = NULL
if ("Grid search" %in% search.method){
message("Searching ENSEMBLE weight by Grid search:")
# GRID SEARCH MATRIX:
gridmat <- getSearchGrid(lengthby = search.length, nparam = length(prop.list))
testp <- NA
ptm <- proc.time()
if (!is.null(truep)){
message("Searching according to proportion--Pearson Correlation...")
testp <- sapply(1:dim(gridmat)[1], function(gg){
temp <- matrix(0, ncol = length(ct.sub), nrow = dim(prop.list[[1]]$prop.est)[1])
colnames(temp) <- ct.sub
wtemp <- NULL
for (z in 1:length(prop.list)){
wtemp <- gridmat[gg,z]*prop.list[[z]]$prop.est
mcol <- match(colnames(wtemp), colnames(temp))
temp[,mcol] <- wtemp + temp[,mcol]
}
rownames(temp) <- rownames(truep)
w_eval <- SCDC_peval(ptrue = as.matrix(truep), pest = temp,
pest.names = c("SCDC"),
select.ct = ct.sub)
w_eval$evals.table[3]
})
w_pearson <- gridmat[which.max(testp),]
}
message("Searching according to bulk expression measurement...")
testy <- sapply(1:dim(gridmat)[1], function(gg){
temp <- 0
for (z in 1:length(prop.list)){
# z=1
# gg=1
ytemp <- gridmat[gg,z]*prop.list[[z]]$yhat[gene.use,]
temp <- ytemp + temp
}
head(temp)
head(yobs)
w_eval <- SCDC_yeval(y = yobs, yest = temp, yest.names = "SCDC")
w_eval$yevals.table
})
ptm2 <- proc.time() - ptm
message("Grid search used", ptm2[3]," seconds.")
# summarize results:
w_spearman <- gridmat[which.max(t(testy)[,1]),]
w_rmsd <- gridmat[which.min(t(testy)[,2]),]
w_mad <- gridmat[which.min(t(testy)[,3]),]
}
View(gridmat)
testy <- sapply(1:dim(gridmat)[1], function(gg){
temp <- 0
for (z in 1:length(prop.list)){
ytemp <- gridmat[gg,z]*prop.list[[z]]$yhat[gene.use,]
temp <- ytemp + temp
}
head(temp)
head(yobs)
w_eval <- SCDC_yeval(y = yobs, yest = temp, yest.names = "SCDC")
w_eval$yevals.table
})
gg=1
temp <- 0
for (z in 1:length(prop.list)){
ytemp <- gridmat[gg,z]*prop.list[[z]]$yhat[gene.use,]
temp <- ytemp + temp
}
yhat.10x.perou <- subcl.10x.perou$sc.basis$basis.mvw %*% t(subcl.10x.perou$prop.est)[colnames(subcl.10x.perou$sc.basis$basis.mvw)]
yhat.10x.perou <- subcl.10x.perou$sc.basis$basis.mvw %*% t(subcl.10x.perou$prop.est)[colnames(subcl.10x.perou$sc.basis$basis.mvw)]
yhat.10x.tmouse <- subcl.10x.tmouse$sc.basis$basis.mvw %*% t(subcl.10x.tmouse$prop.est)[colnames(subcl.10x.tmouse$sc.basis$basis.mvw)]
subcl.10x.perou$yhat <- yhat.10x.perou
subcl.10x.tmouse$yhat <- yhat.10x.tmouse
ens_subcl_perou10x <- SCDC_ENSEMBLE_subcl(bulk.eset = bulk10x, prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou),
ct.sub = c("endothelial","fibroblast","immune","luminal","basal"), search.length = 0.01)
prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou)
prop.list[[1]]$yhat
yhat.10x.perou <- subcl.10x.perou$sc.basis$basis.mvw %*% t(subcl.10x.perou$prop.est)[colnames(subcl.10x.perou$sc.basis$basis.mvw),]
yhat.10x.tmouse <- subcl.10x.tmouse$sc.basis$basis.mvw %*% t(subcl.10x.tmouse$prop.est)[colnames(subcl.10x.tmouse$sc.basis$basis.mvw),]
subcl.10x.perou$yhat <- yhat.10x.perou
subcl.10x.tmouse$yhat <- yhat.10x.tmouse
prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou)
prop.list[[1]]$yhat
ens_subcl_perou10x <- SCDC_ENSEMBLE_subcl(bulk.eset = bulk10x, prop.list = list(tmouse.subcl = subcl.10x.tmouse, perou.subcl = subcl.10x.perou),
ct.sub = c("endothelial","fibroblast","immune","luminal","basal"), search.length = 0.01)
ens_subcl_perou10x$w_table
ENSobject <- ens_subcl_perou10x
weights = "mAD_Y_LAD"
wts <- grep(weights, rownames(ENSobject$w_table))
wts
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),]
wts
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
wts
wts[,1]*ENSobject$prop.list[[1]]$prop.est
wts[,2]*ENSobject$prop.list[[2]]$prop.est
wts <- ENSobject$w_table[grep("self", rownames(ENSobject$w_table)),1:nref]
wts
dim(wts)
dim(wts)[1]
dim(wts)[1] == 0
## calculate weighted proportions
ENSEMBLE_prop <- function(ENSobject, weights = "mAD_Y_LAD", other_wts = NULL){
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
prop.ens <- NULL
for(i in 1:nref){
prop <- wts[,i]*ENSobject$prop.list[[i]]$prop.est
prop.ens <- prop.ens[rownames(prop),colnames(prop)] + prop
}
return(prop.ens)
}
ens.10x.prop <- ENSEMBLE_prop(ENSobject = ens_subcl_perou10x)
## calculate weighted proportions
ENSEMBLE_prop <- function(ENSobject, weights = "mAD_Y_LAD", other_wts = NULL){
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
prop.ens <- matrix()
for(i in 1:nref){
prop <- wts[,i]*ENSobject$prop.list[[i]]$prop.est
prop.ens <- prop.ens[rownames(prop),colnames(prop)] + prop
}
return(prop.ens)
}
ens.10x.prop <- ENSEMBLE_prop(ENSobject = ens_subcl_perou10x)
## calculate weighted proportions
ENSEMBLE_prop <- function(ENSobject, weights = "mAD_Y_LAD", other_wts = NULL){
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
prop.ens <- NULL
for(i in 1:nref){
prop <- wts[,i]*ENSobject$prop.list[[i]]$prop.est
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
return(prop.ens)
}
ens.10x.prop <- ENSEMBLE_prop(ENSobject = ens_subcl_perou10x)
prop.ens <- NULL
for(i in 1:nref){
prop <- wts[,i]*ENSobject$prop.list[[i]]$prop.est
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
i=1
prop <- wts[,i]*ENSobject$prop.list[[i]]$prop.est
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
ENSobject$prop.list[[i]]$prop.est
wts[,i]
ENSobject$prop.list[[i]]$prop.est *wts[,i]
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
prop.ens <- NULL
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
ENSobject$prop.list[[i]]$prop.est * wts[,i]
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- NULL
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
prop.ens
prop
prop.ens
prop.ens <- NULL
prop.ens <- prop.ens + prop
prop.ens
prop.ens <- matrix()
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
i=1
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
nrow <- nrow(ENSobject$prop.list[[1]]$prop.est)
ncol <- ncol(ENSobject$prop.list[[1]]$prop.est)
prop.ens <- matrix(nrow = nrow, ncol = ncol)
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
prop.ens
prop.ens <- matrix(0, nrow = nrow, ncol = ncol)
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
prop.ens
## calculate weighted proportions
ENSEMBLE_prop <- function(ENSobject, weights = "mAD_Y_LAD", other_wts = NULL){
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
nrow <- nrow(ENSobject$prop.list[[1]]$prop.est)
ncol <- ncol(ENSobject$prop.list[[1]]$prop.est)
prop.ens <- matrix(0, nrow = nrow, ncol = ncol)
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
prop.ens <- prop.ens[rownames(prop),colnames(prop)] + prop
}
return(prop.ens)
}
ens.10x.prop <- ENSEMBLE_prop(ENSobject = ens_subcl_perou10x)
nrow <- nrow(ENSobject$prop.list[[1]]$prop.est)
ncol <- ncol(ENSobject$prop.list[[1]]$prop.est)
prop.ens <- matrix(0, nrow = nrow, ncol = ncol)
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
prop.ens <- prop.ens[rownames(prop), colnames(prop)] + prop
}
i=1
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
prop
prop.ens <- prop.ens[rownames(prop), colnames(prop)] + prop
## calculate weighted proportions
ENSEMBLE_prop <- function(ENSobject, weights = "mAD_Y_LAD", other_wts = NULL){
nref <- length(ENSobject$prop.list)
wts <- ENSobject$w_table[grep(weights, rownames(ENSobject$w_table)),1:nref]
if (dim(wts)[1] == 0){
message("Please select the ENSEMBLE weights methods from ENSobject$w_table, or input your own designed weights for each reference...")
if (is.null(other_wts)){
wts <- matrix(data = c(1,rep(0, nref-1)), nrow = 1)
} else {
wts <- as.matrix(other_wts)
}
}
nrow <- nrow(ENSobject$prop.list[[1]]$prop.est)
ncol <- ncol(ENSobject$prop.list[[1]]$prop.est)
prop.ens <- matrix(0, nrow = nrow, ncol = ncol)
for(i in 1:nref){
prop <- ENSobject$prop.list[[i]]$prop.est * wts[,i]
if (i>1){
prop.ens <- prop.ens[rownames(prop),colnames(prop)]
}
prop.ens <- prop.ens + prop
}
return(prop.ens)
}
ens.10x.prop <- ENSEMBLE_prop(ENSobject = ens_subcl_perou10x)
ens.10x.prop
ens_subcl_perou10x$w_table
ens.10x.prop
setwd("H:/994/SCDC/package/SCDC2/SCDC") # THE OLD PATH HAS ERROR TO UPDATE TO GITHUB
#longleaf: ------  setwd("/pine/scr/m/e/meichen/SCDC/SCDC")
devtools::document()
setwd("..")
devtools::install("SCDC")
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
dt <- melt(ens.10x.prop)
View(dt)
ggplot(ens.10x.prop, aes(x=Var1, y=value, fill = Var2)) + geom_bar()
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar()
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity")
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.text = "cell types")
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.text = element_text("cell types"))
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = "Cell types")
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
guides("cell types")
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
legend.title = element_text("Cell types")
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = element_text("Cell types"))
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = element_blank())
p= ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = element_blank())
png(file.path(vpath, "mammarygland.png"), res = 80, height = 300, width = 300)
p
dev.off()
png(file.path(vpath, "mammarygland.png"), res = 80, height = 300, width = 300)
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = element_blank())
dev.off()
vpath <- "H:/994/SCDC/package/SCDC2/SCDC/vignettes"
png(file.path(vpath, "mammarygland.png"), res = 80, height = 300, width = 300)
ggplot(dt, aes(x=Var1, y=value, fill = Var2)) + geom_bar(stat="identity") +
ylab("Proportions") + xlab("Subjects") +
theme(legend.title = element_blank())
dev.off()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
#### update the vignettes website by:
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
#### update the vignettes website by:
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
#### update the vignettes website by:
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
pkgdown::build_site()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
