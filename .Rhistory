install.packages("lqa")
install.packages("genlasso")
n=50
p=100
rho=0
beta=rep(0,p)
beta[1:20]=1
beta[11:15]=2
beta[25]=3
beta[41:45]=1
x=matrix(rnorm(n*p),n,p)
y=x%*%beta+rnorm(n,0,0.5)
f1<-fusedlasso(x,y,lambda1=0.1,lambda2=1)
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="b",lty=1,col="black")
legend("topright",pch=1,lty=1,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
install.packages("extlasso")
library(extlasso)
x=matrix(rnorm(n*p),n,p)
y=x%*%beta+rnorm(n,0,0.5)
f1<-fusedlasso(x,y,lambda1=0.1,lambda2=1)
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="b",lty=1,col="black")
legend("topright",pch=1,lty=1,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
x
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="b",lty=1,col="black")
lines(f1$coef,type="b",lty=1,col="red")
f1$coef
lines(f1$coef,type="l",lty=1,col="red")
legend("topright",pch=1,lty=1,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
lines(f1$coef,type="l",lty=1,col="black")
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="l",lty=1,col="black")
legend("topright",pch=1,lty=1,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
legend("topright",pch=1,lty=2,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
lines(f1$coef,type="l",lty=2,col="black")
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="l",lty=2,col="black")
lines(f1$coef,type="l",lty=2,col="black")
plot(beta,col="blue",type="b",pch=1,ylim=range(beta,f1$coef))
lines(f1$coef,type="l",lty=2,col="black")
legend("topright",pch=1,lty=2,merge=TRUE,text.col=c("blue","black"),legend=c("True","Fitted"))
plot(beta, f1$coef)
p = 100;              # number of features
n = 20;              # number of observation
T = 3;               # max  \|Bi\|_0
s = 4;               # s = si
K = 2;               # max jumps from Bi to B{i+1}
cor = 0.001;         # corelation paramter
seednum = 0;         # the seed number
set.seed(seednum)
X <- matrix(nrow = n*s, ncol = n*p)
X <- matrix(0,nrow = n*s, ncol = n*p)
Sigma <- matrix(0, nrow = p, ncol = p)
for (i in 1:n){
for (k in 1:p){
for (l in 1:p) {
Sigma(k,l) <- cor^(abs(k-l))
}
}
}
for (i in 1:n){
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
}
View(Sigma)
rnorm(s,p)
View(Sigma)
for (i in 1:n){
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi <- Xi* chol(Sigma)
Xi <- Xi*spdiags(1/(sqrt(c(rep(1,4))%*%Xi^2))) # normalization
X[((i-1)*s+1):(i*s), ((i-1)*p+1):(i*p)] <- Xi
}
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
View(Sigma)
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi
chol(Sigma)
Xi <- Xi%*%chol(Sigma)
for (i in 1:n){
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi <- Xi%*%chol(Sigma)
Xi <- Xi%*%spdiags(1/(sqrt(c(rep(1,4))%*%Xi^2))) # normalization
X[((i-1)*s+1):(i*s), ((i-1)*p+1):(i*p)] <- Xi
}
install.packages("crqa")
########################################################
### fused-lasso: from the MATLAB code that Fei sent.
library(crqa)
for (i in 1:n){
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi <- Xi%*%chol(Sigma)
Xi <- Xi%*%spdiags(1/(sqrt(c(rep(1,4))%*%Xi^2))) # normalization
X[((i-1)*s+1):(i*s), ((i-1)*p+1):(i*p)] <- Xi
}
Xi <- Xi%*%spdiags(1/(sqrt(c(rep(1,4))%*%Xi^2))) # normalization
1/(sqrt(c(rep(1,4))%*%Xi^2))
A <- diag(1/(sqrt(c(rep(1,4))%*%Xi^2)))
Xi <- Xi%*%spdiags(A) # normalization
1/(sqrt(c(rep(1,4))%*%Xi^2))
diag(1/(sqrt(c(rep(1,4))%*%Xi^2)))
A <- diag(p)
View(A)
diag(A) <- 1/(sqrt(c(rep(1,4))%*%Xi^2))
View(A)
Xi <- Xi%*%spdiags(A) # normalization
Xi <- Xi%*% A # normalization
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi <- Xi%*%chol(Sigma)
A <- diag(p)
diag(A) <- 1/(sqrt(c(rep(1,4))%*%Xi^2))
Xi <- Xi%*% A # normalization
View(Xi)
View(Sigma)
seednum = 0;         # the seed number
set.seed(seednum)
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
View(Xi)
set.seed(seednum)
X <- matrix(0,nrow = n*s, ncol = n*p)
for (i in 1:n){
Sigma <- matrix(0, nrow = p, ncol = p)
for (k in 1:p){
for (l in 1:p) {
Sigma[k,l] <- cor^(abs(k-l))
}
}
Xi <- matrix(rnorm(s*p), nrow = s, ncol = p)
Xi <- Xi%*%chol(Sigma)
A <- diag(p)
diag(A) <- 1/(sqrt(c(rep(1,4))%*%Xi^2))
Xi <- Xi%*% A # normalization
X[((i-1)*s+1):(i*s), ((i-1)*p+1):(i*p)] <- Xi
}
# generate row group sparse and  B (Bi share similar sparse patten)
# ¡¡with B{i+1}-Bi¡¡sparse
B = matrix(0, p, n)
View(B)
?randperm
id = randperm(p,p)
id
supp = id[1:T]
NZ = matrix(0, T, n)
NZ
base = 100*abs(matrix(rnorm(T), T, 1));
base
id = randperm(T,T)
id
tempbase = base
K=1
id = randperm(T,T)
tempbase = base
tempbase[id[1:K]] <- base[id[1:K]]+ 5*matrix(rnorm(K), K, 1)
tempbase
id[1:K]
for (K in 1:n){
id = randperm(T,T)
tempbase = base
tempbase[id[1:K]] <- base[id[1:K]]+ 5*matrix(rnorm(K), K, 1)
NZ[,K] =  tempbase;
}
matrix(rnorm(K), K, 1)
base[id[1:K]]
base = 100*abs(matrix(rnorm(T), T, 1));
base
K = 2;               # max jumps from Bi to B{i+1}
base = 100*abs(matrix(rnorm(T), T, 1));
for (k in 1:n){
id = randperm(T,T)
tempbase = base
tempbase[id[1:K]] <- base[id[1:K]]+ 5*matrix(rnorm(K), K, 1)
NZ[,k] =  tempbase;
}
B[supp,] = NZ;
B
supp
NZ
B = c(B)
# generate e
sigma = 1e-2;
e  = sigma %*% matrix(rnorm(s*n), s*n,1);
e  = sigma * matrix(rnorm(s*n), s*n,1);
# generate y
y = X%*%B + e;
Ds = diag(n)
Ds = diag(n) *(-1)
diag(Ds[-n,-1]) <- 1
View(Ds)
Ds = diag(n)
diag(Ds[-n,-1]) <-(-1)
Ds[n,c(1,n)] <- -1
View(Ds)
D = kronecker(Ds,diag(p))
Dt = t(D)
diag.spam(2, 4)
opts.N = 50;        # the size of Lambda
opts.M = 5;
opts.Lammin = 1e-1;  # XY [X1'y1,...,Xn'yn],Lambda = max(max(|XY|))*[opts.Lammin,1]
opts.Mumin = 1;    # Mu = 0.25*max(max(|Xy|))*[opts.Mumin,1]
opts.maxiter = 100;     # max number of iteration ADMM for safe guard
opts.change = 0.005;  # stop when  changes on the path <= opts.change
opts.rho1  = 1;      # parameter for augmented lagragian
opts.rho2  = 1;
opts.del = 0*norm(e);
opts.n = n;
opts.p = p;
opts.s = s;
opts.gamma = 2.7;
opts.D = sparse(D);
opts.Dt = sparse(Dt);
??sparse
library(Matrix)
opts.D = Matrix(D)
opts.Dt = Matrix(Dt)
opts.D[1:5,1:4]
opts.df = floor(s*n);  # stop  when ||B^k||_{0} >opts.df
opts.type = 'Mcp'; #¡¡'Lasso',¡¡'Mcp'
devtools::install_github("ctlab/linseed")
install.packages("backports")
devtools::install_github("ctlab/linseed")
library(installr)
updateR()
updateR()
library(installr)
updateR()
devtools::install_github("ctlab/linseed")
library(linseed)
library(devtools)
devtools::install_github("ctlab/linseed")
install.packages("devtools")
library(devtools)
devtools::install_github("ctlab/linseed")
install.packages("devtools")
devtools::install_github("ctlab/linseed")
options(buildtools.check = function(action) TRUE)
devtools::install_github("ctlab/linseed")
install.packages("curl")
devtools::install_github("ctlab/linseed")
options(buildtools.check = function(action) TRUE)
devtools::install_github("ctlab/linseed")
setwd("H:/994/papers/mouse_blood/tabula_muris/data")
facs <- readRDS("T0101_facsSCE.rds")
droplets <- readRDS("T0101_dropletsSCE.rds")
set.seed(200)
#----------------- 1. reduce dim
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(mgcv)
library(tradeSeq)
library(slingshot)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
library(umap)
library(Rtsne)
})
norm_sce <- function(sim){
geneFilter <- apply(assays(sim)$counts,1,function(x){
sum(x >= 5) >= 10
})
sim <- sim[geneFilter, ]
##-- 3. Normalization (full quantile normalization) --##
FQnorm <- function(counts){
rk <- apply(counts,2,rank,ties.method='min')
counts.sort <- apply(counts,2,sort)
refdist <- apply(counts.sort,1,median)
norm <- apply(rk,2,function(r){ refdist[r] })
rownames(norm) <- rownames(counts)
return(norm)
}
assays(sim)$norm <- FQnorm(assays(sim)$counts)
return(sim)
}
facs.norm <- norm_sce(facs)
droplets.norm <- norm_sce(droplets)
# tsne
dim(assays(droplets.norm)$norm)
dim(assays(facs.norm)$norm)
tsne1 <- Rtsne(t(assays(droplets.norm)$norm))
tsne1 <- Rtsne(t(assays(facs.norm)$norm))
tsne2 <- Rtsne(t(assays(droplets.norm)$norm))
umap1 <- umap(t(assays(facs.norm)$norm))
umap2 <- umap(t(assays(droplets.norm)$norm))
UMAP_plot(umap1$layout, cluster = facs$cluster)
source("H:/994/papers/single_cell_DE/scripts/P0200_FUNCTIONS.R")
UMAP_plot(umap1$layout, cluster = facs$cluster)
dt <- as.data.frame(umap1$layout)
UMAP_plot(umap1$layout[,1:2], cluster = facs$cluster)
dt <- umap1$layout
1
q
dt <- umap1$layout
View(dt)
dt <- data.frame(umap1$layout)
View(dt)
colnames(dt) <- c("V1","V2")
n = length(unique(facs$cluster))
ggplot(dt, aes_string(x="V1", y="V2", color=facs$cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_color_manual(values=pal(n))
pal <- choose_palette()
ggplot(dt, aes_string(x="V1", y="V2", color=facs$cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal") +
scale_color_manual(values=pal(n))
ggplot(dt, aes_string(x="V1", y="V2", color=facs$cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
ggplot(dt, aes_string(x="V1", y="V2", color=facs$cluster)) +
geom_point(size=1)
View(dt)
ggplot(dt, aes(x="V1", y="V2", color=facs$cluster)) +
geom_point(size=1)
View(dt)
plot(dt)
dt$cluster <- facs$cluster
ggplot(dt, aes(x= V1, y=V2, color=cluster)) +
geom_point(size=1)
ggplot(dt, aes(x= V1, y=V2, color=cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
dt <- data.frame(umap2$layout)
# dt$cluster <- facs$cluster
# n = length(unique(facs$cluster))
dt$cluster <- droplets$cluster
n = length(unique(droplets$cluster))
colnames(dt) <- c("V1","V2")
ggplot(dt, aes(x= V1, y=V2, color=cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
View(dt)
dt <- data.frame(umap2$layout)
# dt$cluster <- facs$cluster
# n = length(unique(facs$cluster))
dt$cluster <- droplets$cluster
n = length(unique(droplets$cluster))
colnames(dt) <- c("V1","V2")
ggplot(dt, aes(x= V1, y=V2, color=cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
ggplot(dt, aes(x= V1, y=V2, color='cluster')) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
View(dt)
# dt$cluster <- facs$cluster
# n = length(unique(facs$cluster))
dt$cluster <- droplets$cluster
colnames(dt) <- c("V1","V2","cluster")
ggplot(dt, aes(x= V1, y=V2, color= cluster )) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
DRplot <- function(dr, x){
dt <- data.frame(dr)
dt$cluster <- x$cluster
n = length(unique(x$cluster))
colnames(dt) <- c("V1","V2","cluster")
ggplot(dt, aes(x= V1, y=V2, color= cluster)) +
geom_point(size=1) +
guides(colour=guide_legend(override.aes=list(size=6))) +
xlab("") + ylab("") +
ggtitle("") +
theme_light(base_size=10) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "horizontal")
}
DRplot(tsne1$Y[,1:2], facs.norm)
DRplot(tsne2$Y[,1:2], droplets.norm)
reducedDims(facs.norm) <- SimpleList(UMAP = umap1$layout, TSNE = tsne1$Y[,1:2])
reducedDims(droplets.norm) <- SimpleList(UMAP = umap2$layout, TSNE = tsne2$Y[,1:2])
#########
lin.facs <- getLineages(tsne1$Y[,1:2], clusterLabels = facs.norm$cluster, start.clus = 1)
crv.facs <- getCurves(lin.facs)
plotGeneCount(curve = crv.facs, counts = assays(facs.norm)$counts, clusters = facs.norm$cluster)
lin.drop <- getLineages(tsne2$Y[,1:2], clusterLabels = droplets.norm$cluster, start.clus = 1)
crv.drop <- getCurves(lin.drop)
plotGeneCount(curve = crv.drop, counts = assays(droplets.norm)$counts, clusters = droplets.norm$cluster)
lin.drop <- getLineages(tsne2$Y[,1:2], clusterLabels = droplets.norm$cluster, start.clus = 5)
crv.drop <- getCurves(lin.drop)
plotGeneCount(curve = crv.drop, counts = assays(droplets.norm)$counts, clusters = droplets.norm$cluster)
?getLineages
table(droplets.norm$cluster)
lin.drop <- getLineages(tsne2$Y[,1:2], clusterLabels = droplets.norm$cluster, start.clus = "hematopoietic precursor cell")
crv.drop <- getCurves(lin.drop)
plotGeneCount(curve = crv.drop, counts = assays(droplets.norm)$counts, clusters = droplets.norm$cluster)
plotGeneCount(curve = crv.facs, counts = assays(facs.norm)$counts, clusters = facs.norm$cluster)
#########
lin.facs <- getLineages(tsne1$Y[,1:2], clusterLabels = facs.norm$cluster, start.clus = "hematopoietic precursor cell")
crv.facs <- getCurves(lin.facs)
plotGeneCount(curve = crv.facs, counts = assays(facs.norm)$counts, clusters = facs.norm$cluster)
save.image("T0102_tradeseq.rda")
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
pkgdown::build_site()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
use_readme_rmd()
# use_news_md()
use_vignette("SCDC")
use_github_links()
use_travis()
use_cran_badge()
require(devtools)
use_readme_rmd()
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
#### update the vignettes website by:
setwd("H:/994/SCDC/package/SCDC2/SCDC")
pkgdown::build_site()
